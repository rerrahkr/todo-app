// Code generated by MockGen. DO NOT EDIT.
// Source: internal/controller/todo.go
//
// Generated by this command:
//
//	mockgen -source=internal/controller/todo.go -mock_names=TodoController=TodoControllerMock -destination=internal/controller/mock/todo.go -package=controller_mock
//

// Package controller_mock is a generated GoMock package.
package controller_mock

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// TodoControllerMock is a mock of TodoController interface.
type TodoControllerMock struct {
	ctrl     *gomock.Controller
	recorder *TodoControllerMockMockRecorder
	isgomock struct{}
}

// TodoControllerMockMockRecorder is the mock recorder for TodoControllerMock.
type TodoControllerMockMockRecorder struct {
	mock *TodoControllerMock
}

// NewTodoControllerMock creates a new mock instance.
func NewTodoControllerMock(ctrl *gomock.Controller) *TodoControllerMock {
	mock := &TodoControllerMock{ctrl: ctrl}
	mock.recorder = &TodoControllerMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *TodoControllerMock) EXPECT() *TodoControllerMockMockRecorder {
	return m.recorder
}

// DeleteTodoByID mocks base method.
func (m *TodoControllerMock) DeleteTodoByID(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteTodoByID", w, r)
}

// DeleteTodoByID indicates an expected call of DeleteTodoByID.
func (mr *TodoControllerMockMockRecorder) DeleteTodoByID(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTodoByID", reflect.TypeOf((*TodoControllerMock)(nil).DeleteTodoByID), w, r)
}

// GetAllTodos mocks base method.
func (m *TodoControllerMock) GetAllTodos(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetAllTodos", w, r)
}

// GetAllTodos indicates an expected call of GetAllTodos.
func (mr *TodoControllerMockMockRecorder) GetAllTodos(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTodos", reflect.TypeOf((*TodoControllerMock)(nil).GetAllTodos), w, r)
}

// GetTodoByID mocks base method.
func (m *TodoControllerMock) GetTodoByID(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetTodoByID", w, r)
}

// GetTodoByID indicates an expected call of GetTodoByID.
func (mr *TodoControllerMockMockRecorder) GetTodoByID(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodoByID", reflect.TypeOf((*TodoControllerMock)(nil).GetTodoByID), w, r)
}

// NewTodo mocks base method.
func (m *TodoControllerMock) NewTodo(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NewTodo", w, r)
}

// NewTodo indicates an expected call of NewTodo.
func (mr *TodoControllerMockMockRecorder) NewTodo(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTodo", reflect.TypeOf((*TodoControllerMock)(nil).NewTodo), w, r)
}

// UpdateTodoByID mocks base method.
func (m *TodoControllerMock) UpdateTodoByID(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateTodoByID", w, r)
}

// UpdateTodoByID indicates an expected call of UpdateTodoByID.
func (mr *TodoControllerMockMockRecorder) UpdateTodoByID(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTodoByID", reflect.TypeOf((*TodoControllerMock)(nil).UpdateTodoByID), w, r)
}
